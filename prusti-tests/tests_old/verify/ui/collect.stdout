// compile-flags: -Pprint_desugared_specs=true -Pprint_collected_verification_items=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"






#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_test1_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1() { }
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test2_$(NUM_UUID)(result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test2() { }
fn test3() {
    let mut curr = 0;
    while curr < 2 {
        if false {

            #[prusti::spec_only]
            #[prusti::loop_body_invariant_spec]
            #[prusti::spec_id = "$(NUM_UUID)"]
            #[prusti::assertion =
              "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
            ||
                {

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_101"]
                    || -> bool { true };
                };
        };
        curr += 1;
    }
}
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_pre_item_test4_$(NUM_UUID)() {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
#[prusti::assertion =
  "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
fn prusti_post_item_test4_$(NUM_UUID)(result: ()) {

    #[prusti::spec_only]
    #[prusti::expr_id = "$(NUM_UUID)_101"]
    || -> bool { true };
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
#[prusti::post_spec_id_ref = "$(NUM_UUID)"]
fn test4() {
    let mut curr = 0;
    while curr < 2 {
        if false {

            #[prusti::spec_only]
            #[prusti::loop_body_invariant_spec]
            #[prusti::spec_id = "$(NUM_UUID)"]
            #[prusti::assertion =
              "{/"kind/":{/"Expr/":{/"spec_id/":/"$(UUID)/",/"expr_id/":101}}}"]
                {

                    #[prusti::spec_only]
                    #[prusti::expr_id =
                      "$(NUM_UUID)_101"]
                    || -> bool { true };
                };
        };
        curr += 1;
    }
}
fn main() { }
Collected verification items 5:
procedure: collect::test3[0] at $DIR/collect.rs:13:1: 13:11 (#0)
procedure: collect::main[0] at $DIR/collect.rs:31:1: 31:10 (#0)
procedure: collect::test1[0] at $DIR/collect.rs:8:1: 8:11 (#0)
procedure: collect::test2[0] at $DIR/collect.rs:11:1: 11:11 (#0)
procedure: collect::test4[0] at $DIR/collect.rs:23:1: 23:11 (#0)
